from coldfront.config.base import INSTALLED_APPS
from coldfront.config.env import ENV

INSTALLED_APPS += [
    'coldfront_custom_resources',
    'coldfront_custom_resources.compute',
    'coldfront_custom_resources.storage.geode_project',
    'coldfront_custom_resources.storage.slate_project'
]

GEODE_PROJECT_TICKET_QUEUE = ENV.str('GEODE_PROJECT_TICKET_QUEUE')
ENABLE_GEODE_PROJECT_LDAP_INTEGRATION = ENV.str('ENABLE_GEODE_PROJECT_LDAP_INTEGRATION', False)
if ENABLE_GEODE_PROJECT_LDAP_INTEGRATION:
    LDAP_GEODE_PROJECT_SERVER_URI = ENV.str('LDAP_GEODE_PROJECT_SERVER_URI')
    LDAP_GEODE_PROJECT_BASE_DN = ENV.str('LDAP_GEODE_PROJECT_BASE_DN')
    LDAP_GEODE_PROJECT_BIND_DN = ENV.str('LDAP_GEODE_PROJECT_BIND_DN')
    LDAP_GEODE_PROJECT_BIND_PASSWORD = ENV.str('LDAP_GEODE_PROJECT_BIND_PASSWORD')
    LDAP_GEODE_PROJECT_CONNECT_TIMEOUT = ENV.float('LDAP_GEODE_PROJECT_CONNECT_TIMEOUT', 2.5)
    LDAP_GEODE_PROJECT_GROUP_TYPE = ENV.int('LDAP_GEODE_PROJECT_GROUP_TYPE')
    LDAP_GEODE_PROJECT_USER_ACCOUNT_TEMPLATE = ENV.str('LDAP_GEODE_PROJECT_USER_ACCOUNT_TEMPLATE')
    LDAP_GEODE_PROJECT_GROUP_TEMPLATE = ENV.str('LDAP_GEODE_PROJECT_GROUP_TEMPLATE')
    LDAP_GEODE_ALL_USERS_GROUP = ENV.str('LDAP_GEODE_ALL_USERS_GROUP')
    LDAP_GEODE_PROJECT_BASE_SEARCH_DN = ENV.str('LDAP_GEODE_PROJECT_BASE_SEARCH_DN')

LDAP_SLATE_PROJECT_SERVER_URI = ENV.str('LDAP_SLATE_PROJECT_SERVER_URI')
LDAP_SLATE_PROJECT_BASE_DN = ENV.str('LDAP_SLATE_PROJECT_BASE_DN')
LDAP_SLATE_PROJECT_BIND_DN = ENV.str('LDAP_SLATE_PROJECT_BIND_DN')
LDAP_SLATE_PROJECT_BIND_PASSWORD = ENV.str('LDAP_SLATE_PROJECT_BIND_PASSWORD')
LDAP_SLATE_PROJECT_CONNECT_TIMEOUT = ENV.str('LDAP_SLATE_PROJECT_CONNECT_TIMEOUT', 2.5)
DISPLAY_USER_SLATE_PROJECTS = ENV.str('DISPLAY_USER_SLATE_PROJECTS', False)
SLATE_PROJECT_EMAIL = ENV.str('SLATE_PROJECT_EMAIL')
SLATE_PROJECT_TICKET_QUEUE = ENV.str('SLATE_PROJECT_TICKET_QUEUE')

ENABLE_LDAP_SLATE_PROJECT_SYNCING = ENV.bool('ENABLE_LDAP_SLATE_PROJECT_SYNCING', False)
ENABLE_SLATE_PROJECT_SEARCH = ENV.bool('ENABLE_SLATE_PROJECT_SEARCH', False)
SLATE_PROJECT_ELIGIBILITY_ACCOUNT = ENV.str('SLATE_PROJECT_ELIGIBILITY_ACCOUNT')
SLATE_PROJECT_ACCOUNT = ENV.str('SLATE_PROJECT_ACCOUNT')
SLATE_PROJECT_SHOW_ESTIMATED_COST = ENV.str('SLATE_PROJECT_SHOW_ESTIMATED_COST', False)
SLATE_PROJECT_DIR = ENV.str('SLATE_PROJECT_DIR')
SLATE_PROJECT_INCOMING_DIR = ENV.str('SLATE_PROJECT_INCOMING_DIR')
SLATE_PROJECT_ALLOCATED_QUANTITY_THRESHOLD = ENV.int('SLATE_PROJECT_ALLOCATED_QUANTITY_THRESHOLD', 120)
SLATE_PROJECT_ENABLE_MOU_SERVER = ENV.str('SLATE_PROJECT_ENABLE_MOU_SERVER', False)
if SLATE_PROJECT_ENABLE_MOU_SERVER:
    SLATE_PROJECT_MOU_SERVER = ENV.str('SLATE_PROJECT_MOU_SERVER')
ENABLE_LDAP_ELIGIBILITY_SERVER = ENV.bool('ENABLE_LDAP_ELIGIBILITY_SERVER', False)
if ENABLE_LDAP_ELIGIBILITY_SERVER:
    LDAP_ELIGIBILITY_SERVER_URI = ENV.str('LDAP_ELIGIBILITY_SERVER_URI')
    LDAP_ELIGIBILITY_BASE_DN = ENV.str('LDAP_ELIGIBILITY_BASE_DN')
    LDAP_ELIGIBILITY_BIND_DN = ENV.str('LDAP_ELIGIBILITY_BIND_DN')
    LDAP_ELIGIBILITY_BIND_PASSWORD = ENV.str('LDAP_ELIGIBILITY_BIND_PASSWORD')
    LDAP_ELIGIBILITY_CONNECT_TIMEOUT = ENV.str('LDAP_ELIGIBILITY_CONNECT_TIMEOUT', 2.5)
    LDAP_ADS_NETID_FORMAT = ENV.str('LDAP_ADS_NETID_FORMAT')